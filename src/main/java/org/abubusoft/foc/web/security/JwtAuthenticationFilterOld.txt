package org.abubusoft.foc.web.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;

public class JwtAuthenticationFilterOld extends AbstractAuthenticationProcessingFilter {

	JwtService jwtService;

	@Autowired
	public void setJwtService(JwtService jwtService) {
		this.jwtService = jwtService;
	}

	public JwtAuthenticationFilterOld() {
		super("/**");
	}

	@Override
	protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {
		super.unsuccessfulAuthentication(request, response, failed);
	}

	@Override
	protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {
		return true;
	}

	@Override
	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
			throws AuthenticationException {
		
		String header = request.getHeader(appSettings.JWT_HEADER);

		JwtAuthentication user;
		if (header == null) {
			user=jwtService.createAnonymousUser();
		} else if (header.startsWith("Bearer ")){
			
			try {
			String authToken = header.substring(7);
			user=jwtService.decodeToken(authToken);
			} catch (Throwable e) {
				throw (new BadCredentialsException("Token non valido"));
			}
		} else {			
			throw new BadCredentialsException("No JWT token found in request headers");
		}

		return getAuthenticationManager().authenticate(user);
	}

	@Override
	protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)
			throws IOException, ServletException {
		super.successfulAuthentication(request, response, chain, authResult);

		// As this authentication is in HTTP header, after success we need to
		// continue the request normally
		// and return the response as if the resource was not secured at all
		chain.doFilter(request, response);
	}
}